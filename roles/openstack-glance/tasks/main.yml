
# Install required packages
- name: get the mitaka packages
  apt_repository: repo='deb http://ubuntu-cloud.archive.canonical.com/ubuntu trusty-updates/mitaka main' state=present

- name: install keyring
  apt: pkg={{item}} state=present
  with_items:
    - ubuntu-cloud-keyring

- name: install packages
  apt: pkg={{item}} state=present update_cache=yes
  with_items:
    - glance
    - python-openstackclient

# Install and configure Glance
- name: create a table for glance
  mysql_db: name=glance state=present

- name: enable db access 1
  command: mysql -e "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' IDENTIFIED BY '{{ openstack.admin_password }}';"

- name: enable db access 2
  command: mysql  -e "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' IDENTIFIED BY '{{openstack.admin_password}}';"

- name: glance config files
  template: src={{item}}.j2 dest=/etc/glance/{{item}}
  with_items:
      - glance-api.conf
      - glance-registry.conf
  notify: restart glance

- name: glance dbsync
  shell: su -s /bin/sh -c "glance-manage db_sync" glance

- name: flush handlers in case of changed config
  meta: flush_handlers


- name: start glance api
  service: name=glance-api state=started

- name: start glance regisry
  service: name=glance-registry state=started


- name: wait for glance to wake up
  pause: seconds=10

# Create glance user, service, and endpoint
- name: collect services
  command: openstack {{ openstack.args }} service list
  register: _services

- name: collect users
  command: openstack {{ openstack.args }} user list
  register: _users

- name: collect roles
  command: openstack {{ openstack.args }} role list
  register: _roles

- name: collect projects
  command: openstack {{ openstack.args }} project list
  register: _projects

- name: collect domains
  command: openstack {{ openstack.args }} domain list
  register: _domains

- name: add glance user
  command: openstack {{openstack.args}} user create --domain default --password {{openstack.admin_password}} glance
  when: "'glance' not in _users.stdout"

- name: add admin role to glance user
  command: openstack {{openstack.args}} role add --project service --user glance admin
  when: "'glance' not in _users.stdout"

- name: add glance service
  command: openstack {{openstack.args}} service create --name glance --description "Openstack Image" image
  when: "'glance' not in _services.stdout"

- name: add glance endpoints
  command: openstack {{openstack.args}} endpoint create --region RegionOne image {{item.a}} http://controller:{{ item.b }}
  with_items:
      - {a: "public", b: 9292}
      - {a: "internal", b: 9292}
      - {a: "admin", b: 9292}
  when: "'glance' not in _services.stdout"

# - name: add glance endpoints
#   command: openstack {{openstack.args}} endpoint create --region RegionOne image {{item.a}} http://controller:{{ item.b }}
#   with_items:
#       - {a: "public", b: 9292}
#   when: "'glance' not in _services.stdout"

# - name: add glance endpoints
#   command: openstack {{openstack.args}} endpoint create --region RegionOne image {{item.a}} http://controller1:{{ item.b }}
#   with_items:
#       - {a: "internal", b: 9292}
#   when: "'glance' not in _services.stdout"

# - name: add glance endpoints
#   command: openstack {{openstack.args}} endpoint create --region RegionOne image {{item.a}} http://controller2:{{ item.b }}
#   with_items:
#       - {a: "admin", b: 9292}
#   when: "'glance' not in _services.stdout"

- name: wait for glance to wake up
  pause: seconds=10



# Now add a basic image.

- name: collect images
  command: openstack {{ openstack.admin_credentials }} image list
  register: _images

- name: download cirros.conf
  get_url:
    url: http://download.cirros-cloud.net/0.3.3/cirros-0.3.3-x86_64-disk.img
    dest: /tmp/
    mode: 0440
  when: "'cirros' not in _images.stdout"

- name: create the cirros image
  command: openstack {{ openstack.admin_credentials }} image create "cirros" --file /tmp/cirros-0.3.3-x86_64-disk.img  --disk-format qcow2 --container-format bare --public
  when: "'cirros' not in _images.stdout"
